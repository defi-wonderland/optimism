// SPDX-License-Identifier: UNLICENSED
// This file was autogenerated by running `kontrol load-state`. Do not edit this file manually.

pragma solidity ^0.8.13;

import { Vm } from "forge-std/Vm.sol";

import { InitialStateCode } from "./InitialStateCode.sol";

contract InitialState is InitialStateCode {
    // Test contract address, 0x7FA9385bE102ac3EAc297483Dd6233D62b3e1496
    address private constant FOUNDRY_TEST_ADDRESS = 0x7FA9385bE102ac3EAc297483Dd6233D62b3e1496;
    // Cheat code address, 0x7109709ECfa91a80626fF3989D68f67F5b1DD12D
    address private constant VM_ADDRESS = address(uint160(uint256(keccak256("hevm cheat code"))));
    Vm private constant vm = Vm(VM_ADDRESS);

    address internal constant sourceTokenAddress = 0x2e234DAe75C793f67A35089C9d99245E1C58470b;
    address internal constant superchainERC20ImplAddress = 0x5615dEB798BB3E4dFa0139dFa1b3D433Cc23b72f;
    address internal constant mockL2ToL2MessengerAddress = 0x5991A2dF15A8F6A256D3Ec51E99254Cd3fb576A9;
    address internal constant destTokenAddress = 0xF62849F9A0B5Bf2913b396098F7c7019b51A820a;

    function recreateState() public {
        bytes32 slot;
        bytes32 value;
        vm.etch(superchainERC20ImplAddress, superchainERC20ImplCode);
        slot = hex"f0c57e16840df040f15088dc2f81fe391c3923bec73e23a9662efc9c229c6a00";
        value = hex"000000000000000000000000000000000000000000000000ffffffffffffffff";
        vm.store(superchainERC20ImplAddress, slot, value);
        vm.etch(sourceTokenAddress, sourceTokenCode);
        slot = hex"360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc";
        value = hex"0000000000000000000000005615deb798bb3e4dfa0139dfa1b3d433cc23b72f";
        vm.store(sourceTokenAddress, slot, value);
        slot = hex"f0c57e16840df040f15088dc2f81fe391c3923bec73e23a9662efc9c229c6a00";
        value = hex"0000000000000000000000000000000000000000000000000000000000000001";
        vm.store(sourceTokenAddress, slot, value);
        slot = hex"f0c57e16840df040f15088dc2f81fe391c3923bec73e23a9662efc9c229c6a00";
        value = hex"0000000000000000000000000000000000000000000000010000000000000001";
        vm.store(sourceTokenAddress, slot, value);
        slot = hex"07f04e84143df95a6373fcf376312ae41da81a193a3089073a54f47a74d8fb00";
        value = hex"000000000000000000000000857a393dd324e79ff1c0a1ec826a66072e3a881d";
        vm.store(sourceTokenAddress, slot, value);
        slot = hex"07f04e84143df95a6373fcf376312ae41da81a193a3089073a54f47a74d8fb01";
        value = hex"5375706572636861696e4552433230000000000000000000000000000000001e";
        vm.store(sourceTokenAddress, slot, value);
        slot = hex"07f04e84143df95a6373fcf376312ae41da81a193a3089073a54f47a74d8fb02";
        value = hex"535550455200000000000000000000000000000000000000000000000000000a";
        vm.store(sourceTokenAddress, slot, value);
        slot = hex"07f04e84143df95a6373fcf376312ae41da81a193a3089073a54f47a74d8fb03";
        value = hex"0000000000000000000000000000000000000000000000000000000000000012";
        vm.store(sourceTokenAddress, slot, value);
        slot = hex"f0c57e16840df040f15088dc2f81fe391c3923bec73e23a9662efc9c229c6a00";
        value = hex"0000000000000000000000000000000000000000000000000000000000000001";
        vm.store(sourceTokenAddress, slot, value);
        vm.etch(destTokenAddress, destTokenCode);
        slot = hex"360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc";
        value = hex"0000000000000000000000005615deb798bb3e4dfa0139dfa1b3d433cc23b72f";
        vm.store(destTokenAddress, slot, value);
        slot = hex"f0c57e16840df040f15088dc2f81fe391c3923bec73e23a9662efc9c229c6a00";
        value = hex"0000000000000000000000000000000000000000000000000000000000000001";
        vm.store(destTokenAddress, slot, value);
        slot = hex"f0c57e16840df040f15088dc2f81fe391c3923bec73e23a9662efc9c229c6a00";
        value = hex"0000000000000000000000000000000000000000000000010000000000000001";
        vm.store(destTokenAddress, slot, value);
        slot = hex"07f04e84143df95a6373fcf376312ae41da81a193a3089073a54f47a74d8fb00";
        value = hex"000000000000000000000000857a393dd324e79ff1c0a1ec826a66072e3a881d";
        vm.store(destTokenAddress, slot, value);
        slot = hex"07f04e84143df95a6373fcf376312ae41da81a193a3089073a54f47a74d8fb01";
        value = hex"5375706572636861696e4552433230000000000000000000000000000000001e";
        vm.store(destTokenAddress, slot, value);
        slot = hex"07f04e84143df95a6373fcf376312ae41da81a193a3089073a54f47a74d8fb02";
        value = hex"535550455200000000000000000000000000000000000000000000000000000a";
        vm.store(destTokenAddress, slot, value);
        slot = hex"07f04e84143df95a6373fcf376312ae41da81a193a3089073a54f47a74d8fb03";
        value = hex"0000000000000000000000000000000000000000000000000000000000000012";
        vm.store(destTokenAddress, slot, value);
        slot = hex"f0c57e16840df040f15088dc2f81fe391c3923bec73e23a9662efc9c229c6a00";
        value = hex"0000000000000000000000000000000000000000000000000000000000000001";
        vm.store(destTokenAddress, slot, value);
        vm.etch(mockL2ToL2MessengerAddress, mockL2ToL2MessengerCode);
    }

    function _notExternalAddress(address user) public pure {
        vm.assume(user != FOUNDRY_TEST_ADDRESS);
        vm.assume(user != VM_ADDRESS);
        vm.assume(user != sourceTokenAddress);
        vm.assume(user != superchainERC20ImplAddress);
        vm.assume(user != mockL2ToL2MessengerAddress);
        vm.assume(user != destTokenAddress);
    }
}
